
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
/* @ts-nocheck */
/**
 * This file exports the `Base` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums.js"
import type * as Prisma from "../internal/prismaNamespace.js"

/**
 * Model Base
 * 
 */
export type BaseModel = runtime.Types.Result.DefaultSelection<Prisma.$BasePayload>

export type AggregateBase = {
  _count: BaseCountAggregateOutputType | null
  _avg: BaseAvgAggregateOutputType | null
  _sum: BaseSumAggregateOutputType | null
  _min: BaseMinAggregateOutputType | null
  _max: BaseMaxAggregateOutputType | null
}

export type BaseAvgAggregateOutputType = {
  id: number | null
  type: number | null
  openDuration: number | null
}

export type BaseSumAggregateOutputType = {
  id: number | null
  type: number[]
  openDuration: number | null
}

export type BaseMinAggregateOutputType = {
  id: number | null
  name: string | null
  contactPerson: string | null
  contactPhone: string | null
  area: string | null
  address: string | null
  isChargeable: string | null
  openDate: Date | null
  openDuration: number | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BaseMaxAggregateOutputType = {
  id: number | null
  name: string | null
  contactPerson: string | null
  contactPhone: string | null
  area: string | null
  address: string | null
  isChargeable: string | null
  openDate: Date | null
  openDuration: number | null
  description: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type BaseCountAggregateOutputType = {
  id: number
  name: number
  contactPerson: number
  contactPhone: number
  type: number
  area: number
  address: number
  isChargeable: number
  openDate: number
  openDuration: number
  description: number
  images: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type BaseAvgAggregateInputType = {
  id?: true
  type?: true
  openDuration?: true
}

export type BaseSumAggregateInputType = {
  id?: true
  type?: true
  openDuration?: true
}

export type BaseMinAggregateInputType = {
  id?: true
  name?: true
  contactPerson?: true
  contactPhone?: true
  area?: true
  address?: true
  isChargeable?: true
  openDate?: true
  openDuration?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type BaseMaxAggregateInputType = {
  id?: true
  name?: true
  contactPerson?: true
  contactPhone?: true
  area?: true
  address?: true
  isChargeable?: true
  openDate?: true
  openDuration?: true
  description?: true
  createdAt?: true
  updatedAt?: true
}

export type BaseCountAggregateInputType = {
  id?: true
  name?: true
  contactPerson?: true
  contactPhone?: true
  type?: true
  area?: true
  address?: true
  isChargeable?: true
  openDate?: true
  openDuration?: true
  description?: true
  images?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type BaseAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Base to aggregate.
   */
  where?: Prisma.BaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bases to fetch.
   */
  orderBy?: Prisma.BaseOrderByWithRelationInput | Prisma.BaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.BaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Bases
  **/
  _count?: true | BaseCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: BaseAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: BaseSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: BaseMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: BaseMaxAggregateInputType
}

export type GetBaseAggregateType<T extends BaseAggregateArgs> = {
      [P in keyof T & keyof AggregateBase]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateBase[P]>
    : Prisma.GetScalarType<T[P], AggregateBase[P]>
}




export type BaseGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.BaseWhereInput
  orderBy?: Prisma.BaseOrderByWithAggregationInput | Prisma.BaseOrderByWithAggregationInput[]
  by: Prisma.BaseScalarFieldEnum[] | Prisma.BaseScalarFieldEnum
  having?: Prisma.BaseScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: BaseCountAggregateInputType | true
  _avg?: BaseAvgAggregateInputType
  _sum?: BaseSumAggregateInputType
  _min?: BaseMinAggregateInputType
  _max?: BaseMaxAggregateInputType
}

export type BaseGroupByOutputType = {
  id: number
  name: string
  contactPerson: string
  contactPhone: string
  type: number[]
  area: string
  address: string
  isChargeable: string
  openDate: Date | null
  openDuration: number | null
  description: string | null
  images: runtime.JsonValue[]
  createdAt: Date
  updatedAt: Date
  _count: BaseCountAggregateOutputType | null
  _avg: BaseAvgAggregateOutputType | null
  _sum: BaseSumAggregateOutputType | null
  _min: BaseMinAggregateOutputType | null
  _max: BaseMaxAggregateOutputType | null
}

type GetBaseGroupByPayload<T extends BaseGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<BaseGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof BaseGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], BaseGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], BaseGroupByOutputType[P]>
      }
    >
  > 



export type BaseWhereInput = {
  AND?: Prisma.BaseWhereInput | Prisma.BaseWhereInput[]
  OR?: Prisma.BaseWhereInput[]
  NOT?: Prisma.BaseWhereInput | Prisma.BaseWhereInput[]
  id?: Prisma.IntFilter<"Base"> | number
  name?: Prisma.StringFilter<"Base"> | string
  contactPerson?: Prisma.StringFilter<"Base"> | string
  contactPhone?: Prisma.StringFilter<"Base"> | string
  type?: Prisma.IntNullableListFilter<"Base">
  area?: Prisma.StringFilter<"Base"> | string
  address?: Prisma.StringFilter<"Base"> | string
  isChargeable?: Prisma.StringFilter<"Base"> | string
  openDate?: Prisma.DateTimeNullableFilter<"Base"> | Date | string | null
  openDuration?: Prisma.IntNullableFilter<"Base"> | number | null
  description?: Prisma.StringNullableFilter<"Base"> | string | null
  images?: Prisma.JsonNullableListFilter<"Base">
  createdAt?: Prisma.DateTimeFilter<"Base"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Base"> | Date | string
}

export type BaseOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  type?: Prisma.SortOrder
  area?: Prisma.SortOrder
  address?: Prisma.SortOrder
  isChargeable?: Prisma.SortOrder
  openDate?: Prisma.SortOrderInput | Prisma.SortOrder
  openDuration?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  images?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BaseWhereUniqueInput = Prisma.AtLeast<{
  id?: number
  name?: string
  AND?: Prisma.BaseWhereInput | Prisma.BaseWhereInput[]
  OR?: Prisma.BaseWhereInput[]
  NOT?: Prisma.BaseWhereInput | Prisma.BaseWhereInput[]
  contactPerson?: Prisma.StringFilter<"Base"> | string
  contactPhone?: Prisma.StringFilter<"Base"> | string
  type?: Prisma.IntNullableListFilter<"Base">
  area?: Prisma.StringFilter<"Base"> | string
  address?: Prisma.StringFilter<"Base"> | string
  isChargeable?: Prisma.StringFilter<"Base"> | string
  openDate?: Prisma.DateTimeNullableFilter<"Base"> | Date | string | null
  openDuration?: Prisma.IntNullableFilter<"Base"> | number | null
  description?: Prisma.StringNullableFilter<"Base"> | string | null
  images?: Prisma.JsonNullableListFilter<"Base">
  createdAt?: Prisma.DateTimeFilter<"Base"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Base"> | Date | string
}, "id" | "name">

export type BaseOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  type?: Prisma.SortOrder
  area?: Prisma.SortOrder
  address?: Prisma.SortOrder
  isChargeable?: Prisma.SortOrder
  openDate?: Prisma.SortOrderInput | Prisma.SortOrder
  openDuration?: Prisma.SortOrderInput | Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  images?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.BaseCountOrderByAggregateInput
  _avg?: Prisma.BaseAvgOrderByAggregateInput
  _max?: Prisma.BaseMaxOrderByAggregateInput
  _min?: Prisma.BaseMinOrderByAggregateInput
  _sum?: Prisma.BaseSumOrderByAggregateInput
}

export type BaseScalarWhereWithAggregatesInput = {
  AND?: Prisma.BaseScalarWhereWithAggregatesInput | Prisma.BaseScalarWhereWithAggregatesInput[]
  OR?: Prisma.BaseScalarWhereWithAggregatesInput[]
  NOT?: Prisma.BaseScalarWhereWithAggregatesInput | Prisma.BaseScalarWhereWithAggregatesInput[]
  id?: Prisma.IntWithAggregatesFilter<"Base"> | number
  name?: Prisma.StringWithAggregatesFilter<"Base"> | string
  contactPerson?: Prisma.StringWithAggregatesFilter<"Base"> | string
  contactPhone?: Prisma.StringWithAggregatesFilter<"Base"> | string
  type?: Prisma.IntNullableListFilter<"Base">
  area?: Prisma.StringWithAggregatesFilter<"Base"> | string
  address?: Prisma.StringWithAggregatesFilter<"Base"> | string
  isChargeable?: Prisma.StringWithAggregatesFilter<"Base"> | string
  openDate?: Prisma.DateTimeNullableWithAggregatesFilter<"Base"> | Date | string | null
  openDuration?: Prisma.IntNullableWithAggregatesFilter<"Base"> | number | null
  description?: Prisma.StringNullableWithAggregatesFilter<"Base"> | string | null
  images?: Prisma.JsonNullableListFilter<"Base">
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Base"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Base"> | Date | string
}

export type BaseCreateInput = {
  name: string
  contactPerson: string
  contactPhone: string
  type?: Prisma.BaseCreatetypeInput | number[]
  area: string
  address: string
  isChargeable: string
  openDate?: Date | string | null
  openDuration?: number | null
  description?: string | null
  images?: Prisma.BaseCreateimagesInput | runtime.InputJsonValue[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BaseUncheckedCreateInput = {
  id?: number
  name: string
  contactPerson: string
  contactPhone: string
  type?: Prisma.BaseCreatetypeInput | number[]
  area: string
  address: string
  isChargeable: string
  openDate?: Date | string | null
  openDuration?: number | null
  description?: string | null
  images?: Prisma.BaseCreateimagesInput | runtime.InputJsonValue[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BaseUpdateInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.BaseUpdatetypeInput | number[]
  area?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  isChargeable?: Prisma.StringFieldUpdateOperationsInput | string
  openDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  images?: Prisma.BaseUpdateimagesInput | runtime.InputJsonValue[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BaseUncheckedUpdateInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.BaseUpdatetypeInput | number[]
  area?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  isChargeable?: Prisma.StringFieldUpdateOperationsInput | string
  openDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  images?: Prisma.BaseUpdateimagesInput | runtime.InputJsonValue[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BaseCreateManyInput = {
  id?: number
  name: string
  contactPerson: string
  contactPhone: string
  type?: Prisma.BaseCreatetypeInput | number[]
  area: string
  address: string
  isChargeable: string
  openDate?: Date | string | null
  openDuration?: number | null
  description?: string | null
  images?: Prisma.BaseCreateimagesInput | runtime.InputJsonValue[]
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type BaseUpdateManyMutationInput = {
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.BaseUpdatetypeInput | number[]
  area?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  isChargeable?: Prisma.StringFieldUpdateOperationsInput | string
  openDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  images?: Prisma.BaseUpdateimagesInput | runtime.InputJsonValue[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type BaseUncheckedUpdateManyInput = {
  id?: Prisma.IntFieldUpdateOperationsInput | number
  name?: Prisma.StringFieldUpdateOperationsInput | string
  contactPerson?: Prisma.StringFieldUpdateOperationsInput | string
  contactPhone?: Prisma.StringFieldUpdateOperationsInput | string
  type?: Prisma.BaseUpdatetypeInput | number[]
  area?: Prisma.StringFieldUpdateOperationsInput | string
  address?: Prisma.StringFieldUpdateOperationsInput | string
  isChargeable?: Prisma.StringFieldUpdateOperationsInput | string
  openDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  openDuration?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  images?: Prisma.BaseUpdateimagesInput | runtime.InputJsonValue[]
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type IntNullableListFilter<$PrismaModel = never> = {
  equals?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel> | null
  has?: number | Prisma.IntFieldRefInput<$PrismaModel> | null
  hasEvery?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>
  hasSome?: number[] | Prisma.ListIntFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type JsonNullableListFilter<$PrismaModel = never> =
| Prisma.PatchUndefined<
    Prisma.Either<Required<JsonNullableListFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>,
    Required<JsonNullableListFilterBase<$PrismaModel>>
  >
| Prisma.OptionalFlat<Omit<Required<JsonNullableListFilterBase<$PrismaModel>>, 'path'>>

export type JsonNullableListFilterBase<$PrismaModel = never> = {
  equals?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel> | null
  has?: runtime.InputJsonValue | Prisma.JsonFieldRefInput<$PrismaModel> | null
  hasEvery?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  hasSome?: runtime.InputJsonValue[] | Prisma.ListJsonFieldRefInput<$PrismaModel>
  isEmpty?: boolean
}

export type BaseCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  type?: Prisma.SortOrder
  area?: Prisma.SortOrder
  address?: Prisma.SortOrder
  isChargeable?: Prisma.SortOrder
  openDate?: Prisma.SortOrder
  openDuration?: Prisma.SortOrder
  description?: Prisma.SortOrder
  images?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BaseAvgOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  openDuration?: Prisma.SortOrder
}

export type BaseMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  area?: Prisma.SortOrder
  address?: Prisma.SortOrder
  isChargeable?: Prisma.SortOrder
  openDate?: Prisma.SortOrder
  openDuration?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BaseMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  contactPerson?: Prisma.SortOrder
  contactPhone?: Prisma.SortOrder
  area?: Prisma.SortOrder
  address?: Prisma.SortOrder
  isChargeable?: Prisma.SortOrder
  openDate?: Prisma.SortOrder
  openDuration?: Prisma.SortOrder
  description?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type BaseSumOrderByAggregateInput = {
  id?: Prisma.SortOrder
  type?: Prisma.SortOrder
  openDuration?: Prisma.SortOrder
}

export type BaseCreatetypeInput = {
  set: number[]
}

export type BaseCreateimagesInput = {
  set: runtime.InputJsonValue[]
}

export type BaseUpdatetypeInput = {
  set?: number[]
  push?: number | number[]
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null
}

export type BaseUpdateimagesInput = {
  set?: runtime.InputJsonValue[]
  push?: runtime.InputJsonValue | runtime.InputJsonValue[]
}



export type BaseSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  contactPerson?: boolean
  contactPhone?: boolean
  type?: boolean
  area?: boolean
  address?: boolean
  isChargeable?: boolean
  openDate?: boolean
  openDuration?: boolean
  description?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["base"]>

export type BaseSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  contactPerson?: boolean
  contactPhone?: boolean
  type?: boolean
  area?: boolean
  address?: boolean
  isChargeable?: boolean
  openDate?: boolean
  openDuration?: boolean
  description?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["base"]>

export type BaseSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  contactPerson?: boolean
  contactPhone?: boolean
  type?: boolean
  area?: boolean
  address?: boolean
  isChargeable?: boolean
  openDate?: boolean
  openDuration?: boolean
  description?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}, ExtArgs["result"]["base"]>

export type BaseSelectScalar = {
  id?: boolean
  name?: boolean
  contactPerson?: boolean
  contactPhone?: boolean
  type?: boolean
  area?: boolean
  address?: boolean
  isChargeable?: boolean
  openDate?: boolean
  openDuration?: boolean
  description?: boolean
  images?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type BaseOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "contactPerson" | "contactPhone" | "type" | "area" | "address" | "isChargeable" | "openDate" | "openDuration" | "description" | "images" | "createdAt" | "updatedAt", ExtArgs["result"]["base"]>

export type $BasePayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Base"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: number
    name: string
    contactPerson: string
    contactPhone: string
    type: number[]
    area: string
    address: string
    isChargeable: string
    openDate: Date | null
    openDuration: number | null
    description: string | null
    images: runtime.JsonValue[]
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["base"]>
  composites: {}
}

export type BaseGetPayload<S extends boolean | null | undefined | BaseDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$BasePayload, S>

export type BaseCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<BaseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: BaseCountAggregateInputType | true
  }

export interface BaseDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Base'], meta: { name: 'Base' } }
  /**
   * Find zero or one Base that matches the filter.
   * @param {BaseFindUniqueArgs} args - Arguments to find a Base
   * @example
   * // Get one Base
   * const base = await prisma.base.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends BaseFindUniqueArgs>(args: Prisma.SelectSubset<T, BaseFindUniqueArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Base that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {BaseFindUniqueOrThrowArgs} args - Arguments to find a Base
   * @example
   * // Get one Base
   * const base = await prisma.base.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends BaseFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, BaseFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Base that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseFindFirstArgs} args - Arguments to find a Base
   * @example
   * // Get one Base
   * const base = await prisma.base.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends BaseFindFirstArgs>(args?: Prisma.SelectSubset<T, BaseFindFirstArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Base that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseFindFirstOrThrowArgs} args - Arguments to find a Base
   * @example
   * // Get one Base
   * const base = await prisma.base.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends BaseFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, BaseFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Bases that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Bases
   * const bases = await prisma.base.findMany()
   * 
   * // Get first 10 Bases
   * const bases = await prisma.base.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const baseWithIdOnly = await prisma.base.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends BaseFindManyArgs>(args?: Prisma.SelectSubset<T, BaseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Base.
   * @param {BaseCreateArgs} args - Arguments to create a Base.
   * @example
   * // Create one Base
   * const Base = await prisma.base.create({
   *   data: {
   *     // ... data to create a Base
   *   }
   * })
   * 
   */
  create<T extends BaseCreateArgs>(args: Prisma.SelectSubset<T, BaseCreateArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Bases.
   * @param {BaseCreateManyArgs} args - Arguments to create many Bases.
   * @example
   * // Create many Bases
   * const base = await prisma.base.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends BaseCreateManyArgs>(args?: Prisma.SelectSubset<T, BaseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Bases and returns the data saved in the database.
   * @param {BaseCreateManyAndReturnArgs} args - Arguments to create many Bases.
   * @example
   * // Create many Bases
   * const base = await prisma.base.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Bases and only return the `id`
   * const baseWithIdOnly = await prisma.base.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends BaseCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, BaseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Base.
   * @param {BaseDeleteArgs} args - Arguments to delete one Base.
   * @example
   * // Delete one Base
   * const Base = await prisma.base.delete({
   *   where: {
   *     // ... filter to delete one Base
   *   }
   * })
   * 
   */
  delete<T extends BaseDeleteArgs>(args: Prisma.SelectSubset<T, BaseDeleteArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Base.
   * @param {BaseUpdateArgs} args - Arguments to update one Base.
   * @example
   * // Update one Base
   * const base = await prisma.base.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends BaseUpdateArgs>(args: Prisma.SelectSubset<T, BaseUpdateArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Bases.
   * @param {BaseDeleteManyArgs} args - Arguments to filter Bases to delete.
   * @example
   * // Delete a few Bases
   * const { count } = await prisma.base.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends BaseDeleteManyArgs>(args?: Prisma.SelectSubset<T, BaseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Bases
   * const base = await prisma.base.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends BaseUpdateManyArgs>(args: Prisma.SelectSubset<T, BaseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Bases and returns the data updated in the database.
   * @param {BaseUpdateManyAndReturnArgs} args - Arguments to update many Bases.
   * @example
   * // Update many Bases
   * const base = await prisma.base.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Bases and only return the `id`
   * const baseWithIdOnly = await prisma.base.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends BaseUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, BaseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Base.
   * @param {BaseUpsertArgs} args - Arguments to update or create a Base.
   * @example
   * // Update or create a Base
   * const base = await prisma.base.upsert({
   *   create: {
   *     // ... data to create a Base
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Base we want to update
   *   }
   * })
   */
  upsert<T extends BaseUpsertArgs>(args: Prisma.SelectSubset<T, BaseUpsertArgs<ExtArgs>>): Prisma.Prisma__BaseClient<runtime.Types.Result.GetResult<Prisma.$BasePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Bases.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseCountArgs} args - Arguments to filter Bases to count.
   * @example
   * // Count the number of Bases
   * const count = await prisma.base.count({
   *   where: {
   *     // ... the filter for the Bases we want to count
   *   }
   * })
  **/
  count<T extends BaseCountArgs>(
    args?: Prisma.Subset<T, BaseCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], BaseCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Base.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends BaseAggregateArgs>(args: Prisma.Subset<T, BaseAggregateArgs>): Prisma.PrismaPromise<GetBaseAggregateType<T>>

  /**
   * Group by Base.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {BaseGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends BaseGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: BaseGroupByArgs['orderBy'] }
      : { orderBy?: BaseGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, BaseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBaseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Base model
 */
readonly fields: BaseFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Base.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__BaseClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Base model
 */
export interface BaseFieldRefs {
  readonly id: Prisma.FieldRef<"Base", 'Int'>
  readonly name: Prisma.FieldRef<"Base", 'String'>
  readonly contactPerson: Prisma.FieldRef<"Base", 'String'>
  readonly contactPhone: Prisma.FieldRef<"Base", 'String'>
  readonly type: Prisma.FieldRef<"Base", 'Int[]'>
  readonly area: Prisma.FieldRef<"Base", 'String'>
  readonly address: Prisma.FieldRef<"Base", 'String'>
  readonly isChargeable: Prisma.FieldRef<"Base", 'String'>
  readonly openDate: Prisma.FieldRef<"Base", 'DateTime'>
  readonly openDuration: Prisma.FieldRef<"Base", 'Int'>
  readonly description: Prisma.FieldRef<"Base", 'String'>
  readonly images: Prisma.FieldRef<"Base", 'Json[]'>
  readonly createdAt: Prisma.FieldRef<"Base", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Base", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Base findUnique
 */
export type BaseFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * Filter, which Base to fetch.
   */
  where: Prisma.BaseWhereUniqueInput
}

/**
 * Base findUniqueOrThrow
 */
export type BaseFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * Filter, which Base to fetch.
   */
  where: Prisma.BaseWhereUniqueInput
}

/**
 * Base findFirst
 */
export type BaseFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * Filter, which Base to fetch.
   */
  where?: Prisma.BaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bases to fetch.
   */
  orderBy?: Prisma.BaseOrderByWithRelationInput | Prisma.BaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bases.
   */
  cursor?: Prisma.BaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bases.
   */
  distinct?: Prisma.BaseScalarFieldEnum | Prisma.BaseScalarFieldEnum[]
}

/**
 * Base findFirstOrThrow
 */
export type BaseFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * Filter, which Base to fetch.
   */
  where?: Prisma.BaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bases to fetch.
   */
  orderBy?: Prisma.BaseOrderByWithRelationInput | Prisma.BaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Bases.
   */
  cursor?: Prisma.BaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bases.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Bases.
   */
  distinct?: Prisma.BaseScalarFieldEnum | Prisma.BaseScalarFieldEnum[]
}

/**
 * Base findMany
 */
export type BaseFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * Filter, which Bases to fetch.
   */
  where?: Prisma.BaseWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Bases to fetch.
   */
  orderBy?: Prisma.BaseOrderByWithRelationInput | Prisma.BaseOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Bases.
   */
  cursor?: Prisma.BaseWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Bases from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Bases.
   */
  skip?: number
  distinct?: Prisma.BaseScalarFieldEnum | Prisma.BaseScalarFieldEnum[]
}

/**
 * Base create
 */
export type BaseCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * The data needed to create a Base.
   */
  data: Prisma.XOR<Prisma.BaseCreateInput, Prisma.BaseUncheckedCreateInput>
}

/**
 * Base createMany
 */
export type BaseCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Bases.
   */
  data: Prisma.BaseCreateManyInput | Prisma.BaseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Base createManyAndReturn
 */
export type BaseCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * The data used to create many Bases.
   */
  data: Prisma.BaseCreateManyInput | Prisma.BaseCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Base update
 */
export type BaseUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * The data needed to update a Base.
   */
  data: Prisma.XOR<Prisma.BaseUpdateInput, Prisma.BaseUncheckedUpdateInput>
  /**
   * Choose, which Base to update.
   */
  where: Prisma.BaseWhereUniqueInput
}

/**
 * Base updateMany
 */
export type BaseUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Bases.
   */
  data: Prisma.XOR<Prisma.BaseUpdateManyMutationInput, Prisma.BaseUncheckedUpdateManyInput>
  /**
   * Filter which Bases to update
   */
  where?: Prisma.BaseWhereInput
  /**
   * Limit how many Bases to update.
   */
  limit?: number
}

/**
 * Base updateManyAndReturn
 */
export type BaseUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * The data used to update Bases.
   */
  data: Prisma.XOR<Prisma.BaseUpdateManyMutationInput, Prisma.BaseUncheckedUpdateManyInput>
  /**
   * Filter which Bases to update
   */
  where?: Prisma.BaseWhereInput
  /**
   * Limit how many Bases to update.
   */
  limit?: number
}

/**
 * Base upsert
 */
export type BaseUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * The filter to search for the Base to update in case it exists.
   */
  where: Prisma.BaseWhereUniqueInput
  /**
   * In case the Base found by the `where` argument doesn't exist, create a new Base with this data.
   */
  create: Prisma.XOR<Prisma.BaseCreateInput, Prisma.BaseUncheckedCreateInput>
  /**
   * In case the Base was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.BaseUpdateInput, Prisma.BaseUncheckedUpdateInput>
}

/**
 * Base delete
 */
export type BaseDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
  /**
   * Filter which Base to delete.
   */
  where: Prisma.BaseWhereUniqueInput
}

/**
 * Base deleteMany
 */
export type BaseDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Bases to delete
   */
  where?: Prisma.BaseWhereInput
  /**
   * Limit how many Bases to delete.
   */
  limit?: number
}

/**
 * Base without action
 */
export type BaseDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Base
   */
  select?: Prisma.BaseSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Base
   */
  omit?: Prisma.BaseOmit<ExtArgs> | null
}
